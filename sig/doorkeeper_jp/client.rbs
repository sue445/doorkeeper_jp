module DoorkeeperJp
  class Client
    def initialize: (?String? access_token) -> void

    def events: (?page: Integer?, ?locale: String?, ?sort: String?, ?since_date: Date?, ?until_date: Date?, ?keyword: String?, ?prefecture: String?, ?is_expand_group: bool) -> Array[DoorkeeperJp::Response]

    def group_events: (String group, ?page: Integer?, ?locale: String?, ?sort: String?, ?since_date: Date?, ?until_date: Date?, ?keyword: String?, ?prefecture: String?, ?is_expand_group: bool) -> Array[DoorkeeperJp::Response]

    def group: (String group, ?locale: String?) -> DoorkeeperJp::Response

    def event: (Integer id, ?is_expand_group: bool, ?locale: String?) -> DoorkeeperJp::Response

    private

    def get_events: (path: String, page: Integer?, locale: String?, sort: String?, since_date: Date?, until_date: Date?, keyword: String?, prefecture: String?, is_expand_group: bool) -> Array[DoorkeeperJp::Response]

    def connection: () -> Faraday::Connection

    def request_headers: () -> Hash[String, String]

    def event_params: (page: Integer?, locale: String?, sort: String?, since_date: Date?, until_date: Date?, keyword: String?, prefecture: String?, is_expand_group: bool) -> Hash[Symbol|String, untyped]

    def to_ymd: (Date? date) -> String?
  end
end
